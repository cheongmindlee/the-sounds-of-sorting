package edu.grinnell.csc207.soundsofsorting.sorts;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import edu.grinnell.csc207.soundsofsorting.sortevents.CompareEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.CopyEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SortEvent;
import edu.grinnell.csc207.soundsofsorting.sortevents.SwapEvent;

/**
 * A collection of sorting algorithms.
 */
public class Sorts {
    /**
     * Swaps indices <code>i</code> and <code>j</code> of array <code>arr</code>.
     * @param <T> the carrier type of the array
     * @param arr the array to swap
     * @param i the first index to swap
     * @param j the second index to swap
     */
    public static <T> void swap(T[] arr, int i, int j) {
        T tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }

    /**
     * Sorts the l array by going through all the events
     * @param <T> The carrier type of the array
     * @param l The array that holds the T type elements
     * @param events Contains the elements done on the array
     */
    public static <T> void eventSort(T[] l, List<SortEvent<T>> events){
        for(SortEvent<T> e: events){
            e.apply(l);    
        }
    }
    /**
     * Sorts the array according to the bubble sort algorithm:
     * <pre>
     * [ unprocessed | i largest elements in order ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> bubbleSort(T[] arr) {
        List<SortEvent<Integer>> events = new ArrayList<>();

        //Go to arr.length - 1 so we don't double run the last comparison
        for(int i = 0; i < arr.length - 1; i++){

            //Check starting from 0 and check with each pair and swap with the one ahead if it is greater
            for(int j = 0; j < arr.length - i - 1; j++){
                events.add(new CompareEvent<>(j, j+1));
                if(arr[j].compareTo(arr[j + 1]) > 0){
                    events.add(new SwapEvent<>(j, j+1));
                    swap(arr, j, j+1);
                }
            }
        }

        //Contains the sort events
        return events;

    }

    /**
     * Sorts the array according to the selection sort algorithm:
     * <pre>
     * [ i smallest elements in order | unprocessed ]
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> selectionSort(
            T[] arr) {
            
        List<SortEvent<Integer>> events = new ArrayList<>();

        for(int i = 0; i < arr.length - 1; i++){
            int min = i;
            for(int j = i+1; j<arr.length; j++){
                events.add(new CompareEvent<>(min, j));
                if(arr[min].compareTo(arr[j]) > 0){
                    //If the element at j is smaller than element at min make j the new min
                    min = j; 
                }
            }

            //Swap the ith element with the smallest element
            events.add(new SwapEvent<>(i, min));
            swap(arr, i, min);
            //Log swap event?
        }
        return events;
    }

    /**
     * Sorts the array according to the insertion sort algorithm:
     * <pre>
     * [ i elements in order | unprocessed ] 
     * </pre>
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<Integer>> insertionSort(
            T[] arr) {
        List<SortEvent<Integer>> events = new ArrayList<>();
        for(int i = 1; i < arr.length; i++){
            int j = i;
            //Go down the sorted half of the array and shift them up until the unsorted element can be placed
            while(j > 0 && arr[j].compareTo(arr[j-1]) < 0){
                events.add(new CompareEvent<>(j, j-1));
                events.add(new SwapEvent<>(j, j-1));
                swap(arr, j, j-1);
                j--;
                //Log swap events here?
            }
        }
        return events;
    }

    /**
     * Recursively calls itself into singular elements and then calls merge to start merge sorting
     * @param <T> the carrier type of the array
     * @param arr The original array
     * @param scratchArr scratch array to move values around in
     * @param start index at which the array starts(inclusive)
     * @param end  index at which array ends(exclusive)
     */
    public static <T extends Comparable<? super T>> void mergeHelper(List<SortEvent<T>> events, T[] arr,T[] scratchArr, int start, int end){
        //Keep splitting until it is contains just one element
        int midpoint = (end - start)/ 2 + start;
        if(end-start <= 1){
            return;
        }
        //sort left and right side
        mergeHelper(events, arr, scratchArr, start, midpoint);
        mergeHelper(events, arr, scratchArr, midpoint, end);
        merge(events, arr, scratchArr, start, midpoint, end);
    }

    /**
     * takes the given indcies of the array to be sorted and sorts them
     * @param <T> the carrier type of the array
     * @param arr The original array
     * @param scratchArr scratch array to move values around in
     * @param start index at which the array starts(inclusive)
     * @param midpoint midpoint of the array
     * @param end  index at which array ends(exclusive)
     */
    public static <T extends Comparable<? super T>> void merge(List<SortEvent<T>> events, T[] arr,T[] scratchArr, int start, int midpoint, int end){
        int startI = start;
        int middleI = midpoint;
        int index = start;

        //While both halves of the array are not at their end compare each element and put the smaller one first
        while(startI < midpoint && middleI < end){
            events.add(new CompareEvent<>(startI, middleI));
            if(arr[startI].compareTo(arr[middleI]) < 0){
                events.add(new CopyEvent<>(arr[startI], index));
                scratchArr[index++] = arr[startI++];
            } else {
                events.add(new CopyEvent<>(arr[middleI], index));
                scratchArr[index++] = arr[middleI++];
            }
        }
        //If the first half of the array is all used fill the rest up with what remains on the second half
        if(startI == midpoint){
            for(int i = middleI; i<end; i++){
                events.add(new CopyEvent<>(arr[i], index));
                scratchArr[index++] = arr[i];
            }
        } else {     
            for(int i = startI; i<midpoint; i++){
                events.add(new CopyEvent<>(arr[i], index));
                scratchArr[index++] = arr[i];
            }
        }

        //update the original array
        for(int i = start; i < end; i++){
            arr[i] = scratchArr[i];
        }
    }       
    /**
     * Sorts the array according to the merge sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> mergeSort(
            T[] arr) {
        List<SortEvent<T>> events = new ArrayList<>();
        
        T[] scratchArr = Arrays.copyOf(arr, arr.length);
        mergeHelper(events, arr, scratchArr, 0, arr.length);

        return events;
    }   

    /**
     * Takes in an array and indices as to where the array starts and ends and then recursivly calls itself to sort
     * the array in smaller and smaller chunks following the quickSort algorithm.
     * @param <T> The carrier type of teh array
     * @param arr the array to sort
     * @param start the index where the array starts
     * @param end   the index where the array ends
     */
    public static <T extends Comparable<? super T>> void quickSortHelper(List<SortEvent<T>> event, T[] arr, int start, int end){
        if(end-start <= 1){
            return;
        }

        int midpoint = quickSorter(event, arr, start, end);
        quickSortHelper(event, arr, start, midpoint);
        quickSortHelper(event, arr, midpoint +1, end);
    }

    /**
     * Takes in an array and the indices to sort through. Actually sorts the subarray using the quick sort algorithm
     * and then returns the index of the pivot value
     * @param <T> The carrier type of the array
     * @param arr the array to sort
     * @param start the index where the array starts
     * @param end the index where the array ends
     * @return the index where we placed the pivot value
     */
    public static <T extends Comparable<? super T>> int quickSorter(List<SortEvent<T>> event, T[] arr, int start, int end){
        int startI = start;
        int endI = end - 2;

        T pivot = arr[end -1];
        while(startI <= endI){
            //Go until we find a value to be swapped or reach the end of the array
            while(startI <= endI && arr[startI].compareTo(pivot) <= 0 ){
                event.add(new CompareEvent<>(startI, end-1));
                startI++;
            }
            while(endI >= startI && arr[endI].compareTo(pivot) >= 0 ){
                event.add(new CompareEvent<>(endI, end-1));
                endI--;
            }
            if(startI < endI){
                event.add(new SwapEvent<>(startI, endI));
                swap(arr, startI, endI);
                startI++;
                endI--;
            }
        }
        //Place pivot value where the pointers met up
        event.add(new SwapEvent<>(startI, end-1));
        event.add(new CopyEvent<>(arr[startI], end-1));
        event.add(new CopyEvent<>(pivot, startI));
        swap(arr, startI, end-1);
        //return where to split
        return startI;
    }
    /**
     * Sorts the array according to the quick sort algorithm.
     * @param <T> the carrier type of the array
     * @param arr the array to sort
     * @return the sort events generated by this sort
     */
    public static <T extends Comparable<? super T>> List<SortEvent<T>> quickSort(T[] arr) {
        List<SortEvent<T>> event = new ArrayList<>();
        quickSortHelper(event, arr, 0 , arr.length);
        return event;
    }
}
